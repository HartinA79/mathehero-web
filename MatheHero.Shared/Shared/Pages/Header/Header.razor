@using System.Globalization
@using MatheHero.Shared.Resources.Shared.Pages
@using MatheHero.Shared.Helper
@using MatheHero.Shared.Models
@using MatheHero.Shared.Shared.Interface


@inject AuthStateService AuthStateService
@inject IStringLocalizer<BaseStringLocalizer> _baseLocalizer
@inject IAuthService _authService
@inject NavigationManager Navigation
@inject ILanguageService LanguageService
@inject IPlatformService Platform
@inject IJSRuntime JS

@if (_isInitialized)
{
    @if (!string.IsNullOrWhiteSpace(currentAuth?.IdToken) && !string.IsNullOrWhiteSpace(currentUser.UserName))
    {
        <div class="header-container">
            <div class="left-header-content" @onclick="ToggleMenu">
                @if (!string.IsNullOrWhiteSpace(currentUser.AvatarPfad))
                {
                    <img src="@currentUser.AvatarPfad" class="header-avatar" />
                }
                <div class="header-user-info">
                    <div class="header-username">@_baseLocalizer[BaseStringLocalizerResourceKeys.WelcomeText], @currentUser.UserName</div>
                </div>
            </div>
            <div class="right-header-container">
                @foreach (var culture in _availableCultures.Where(c => c.Code != currentCulture))
                {
                    <img src="@culture.FlagPath" class="flag-icon" title="@culture.DisplayName" @onclick="() => ChangeCulture(culture.Code)" />
                }
            </div>
        </div>

        @if (_isShowMenu)
        {
            <div class="header-user-menu @(_isShowMenu ? "header-show" : "")">
                <p class="header-user-menu-link">@_baseLocalizer[BaseStringLocalizerResourceKeys.Profil]</p>
                <p class="header-user-menu-link">@_baseLocalizer[BaseStringLocalizerResourceKeys.Einstellungen]</p>
                <p class="header-user-menu-link" @onclick="GoToKlassenCode">@_baseLocalizer[BaseStringLocalizerResourceKeys.KlasseBeitreten]</p>
                <p class="header-user-menu-link" @onclick="UserLogout">@_baseLocalizer[BaseStringLocalizerResourceKeys.Abmelden]</p>
                <p class="header-user-menu-link" @onclick="ToggleMenu">@_baseLocalizer[BaseStringLocalizerResourceKeys.Schliessen]</p>
            </div>
        }
    }
    else
    {
        if (!Navigation.Uri.EndsWith("/") && !Navigation.Uri.EndsWith("/loadingscreen"))
        {

            <div class="header-container no-user">
                <div class="header-app-name">MATHE - HERO</div>
                <div class="flag-container-centered">
                    @foreach (var culture in _availableCultures.Where(c => c.Code != currentCulture))
                    {
                        <img src="@culture.FlagPath" class="flag-icon" title="@culture.DisplayName" @onclick="() => ChangeCulture(culture.Code)" />
                    }
                </div>
            </div>
        }
    }
}

@code {
    private UserModel currentUser;

    private AuthResult currentAuth;

    private bool _isInitialized = false;

    private bool _isShowMenu = false;

    private string currentCulture;

    private List<(string Code, string DisplayName, string FlagPath)> _availableCultures = new()
    {
        ("de-DE", "Deutsch", "_content/MatheHero.Shared/css/icons/Icon_DE.svg"),
        ("en-US", "English", "_content/MatheHero.Shared/css/icons/Icon_EN.svg"),
        ("it-IT", "Italiano", "_content/MatheHero.Shared/css/icons/Icon_IT.svg")
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        currentCulture = CultureInfo.CurrentUICulture.Name;

        currentUser = AuthStateService.GetCurrentUserStatus();
        currentAuth = AuthStateService.GetCurrentAuthStatus();

        _isInitialized = true;
        StateHasChanged();

    }

    protected override void OnInitialized()
    {
        currentCulture = CultureInfo.CurrentUICulture.Name;

        currentUser = AuthStateService.GetCurrentUserStatus();
        currentAuth = AuthStateService.GetCurrentAuthStatus();

        _isInitialized = true;
        StateHasChanged();
    }

    private void ToggleMenu()
    {
        _isShowMenu = !_isShowMenu;
        StateHasChanged();
    }

    private async Task UserLogout()
    {
        await _authService.LogoutAsync();

        AuthStateService.Clear();

        if (Platform.IsRunningInMaui())
            Navigation.NavigateTo("/login");
        else
            Navigation.NavigateTo("/login", forceLoad: true);
    }

    private async Task ChangeCulture(string cultureCode)
    {
        LanguageService.SetCulture(cultureCode);

        if (Platform.IsRunningInMaui())
        {
            var current = Navigation.Uri;

            Navigation.NavigateTo("/basepage");
            await Task.Delay(50);
            Navigation.NavigateTo(current, forceLoad: false);
        }
        else
        {
            await JS.InvokeVoidAsync("setCulture", cultureCode);
        }
    }

    private void GoToKlassenCode()
    {
        Navigation.NavigateTo("/klassencode");
    }
}
